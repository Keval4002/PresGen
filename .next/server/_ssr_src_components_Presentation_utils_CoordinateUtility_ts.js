"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_components_Presentation_utils_CoordinateUtility_ts";
exports.ids = ["_ssr_src_components_Presentation_utils_CoordinateUtility_ts"];
exports.modules = {

/***/ "(ssr)/./src/components/Presentation/utils/CoordinateUtility.ts":
/*!****************************************************************!*\
  !*** ./src/components/Presentation/utils/CoordinateUtility.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CoordinateManager: () => (/* binding */ CoordinateManager),\n/* harmony export */   PPTX_DIMENSIONS: () => (/* binding */ PPTX_DIMENSIONS),\n/* harmony export */   PptxExportManager: () => (/* binding */ PptxExportManager)\n/* harmony export */ });\n/* harmony import */ var _Edit_CanvaTypesConst__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Edit/CanvaTypesConst */ \"(ssr)/./src/components/Presentation/Edit/CanvaTypesConst.ts\");\n\nconst PPTX_DIMENSIONS = {\n    WIDTH: 10,\n    HEIGHT: 5.625\n};\nclass CoordinateManager {\n    webToPptx(webCoords) {\n        if (!this.isValidWebCoordinate(webCoords)) return null;\n        const { x, y, w, h } = webCoords;\n        return {\n            x: x * PPTX_DIMENSIONS.WIDTH,\n            y: y * PPTX_DIMENSIONS.HEIGHT,\n            w: Math.min(w * PPTX_DIMENSIONS.WIDTH, PPTX_DIMENSIONS.WIDTH - x * PPTX_DIMENSIONS.WIDTH),\n            h: Math.min(h * PPTX_DIMENSIONS.HEIGHT, PPTX_DIMENSIONS.HEIGHT - y * PPTX_DIMENSIONS.HEIGHT)\n        };\n    }\n    isValidWebCoordinate(coords) {\n        if (!coords || typeof coords !== \"object\") return false;\n        const { x, y, w, h } = coords;\n        return [\n            x,\n            y,\n            w,\n            h\n        ].every((val)=>typeof val === \"number\" && isFinite(val)) && w >= 0 && h >= 0 && x >= 0 && x <= 1 && y >= 0 && y <= 1;\n    }\n    validateAndNormalizeLayout(layout) {\n        if (!layout || typeof layout !== \"object\") return null;\n        const validatedLayout = {};\n        for(const key in layout){\n            if (Object.prototype.hasOwnProperty.call(layout, key) && layout[key] && this.isValidWebCoordinate(layout[key])) {\n                validatedLayout[key] = layout[key];\n            }\n        }\n        return Object.keys(validatedLayout).length > 0 ? validatedLayout : null;\n    }\n    validateSlideMeasurements(measurements) {\n        if (!measurements) return false;\n        if (!measurements.title) return false;\n        for(const key in measurements){\n            if (!this.isValidWebCoordinate(measurements[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nclass PptxExportManager {\n    constructor(){\n    // Removed unused coordinateManager property\n    }\n    async exportSavedPresentation(data, theme) {\n        // Ensure JSZip is loaded first\n        if (false) {}\n        // Then load pptxgenjs\n        if (false) {}\n        const PptxGenJS = window.PptxGenJS;\n        const pptx = new PptxGenJS();\n        pptx.layout = 'LAYOUT_16x9';\n        pptx.title = data.slides?.[0]?.title || \"Presentation\";\n        data.slides.forEach((slideData)=>{\n            this.addSlideFromCanvasElements(pptx, slideData, theme);\n        });\n        await pptx.writeFile({\n            fileName: `${pptx.title}.pptx`\n        });\n    }\n    addSlideFromCanvasElements(pptx, slideData, theme) {\n        const slide = pptx.addSlide();\n        const backgroundHex = theme?.background_color || '#FFFFFF';\n        if (backgroundHex) {\n            slide.background = {\n                color: backgroundHex.replace(\"#\", \"\")\n            };\n        }\n        const hasTitleElement = slideData.canvasElements?.some((el)=>el.type === 'text' && (el.text === slideData.title || el.isTitle));\n        if (slideData.title && !hasTitleElement) {\n            slide.addText(slideData.title, {\n                x: 0.5,\n                y: 0.25,\n                w: 9,\n                h: 0.75,\n                fontFace: theme?.heading_font || 'Arial',\n                fontSize: 24,\n                color: (theme?.primary_color || '000000').replace(\"#\", \"\"),\n                bold: true,\n                align: 'center',\n                valign: 'middle'\n            });\n        }\n        const canvasWidth = slideData.canvasWidth || _Edit_CanvaTypesConst__WEBPACK_IMPORTED_MODULE_0__.CANVAS_CONFIG.WIDTH;\n        const canvasHeight = slideData.canvasHeight || _Edit_CanvaTypesConst__WEBPACK_IMPORTED_MODULE_0__.CANVAS_CONFIG.HEIGHT;\n        (slideData.canvasElements || []).forEach((el)=>{\n            this.addCanvasElementToSlide(slide, el, theme, canvasWidth, canvasHeight);\n        });\n    }\n    addCanvasElementToSlide(slide, element, theme, canvasWidth, canvasHeight) {\n        const pptxCoords = this.canvasToPptxCoordinates(element, canvasWidth, canvasHeight);\n        switch(element.type){\n            case 'text':\n                this.addTextElementToSlide(slide, element, pptxCoords, theme, canvasWidth);\n                break;\n            case 'image':\n                this.addImageElementToSlide(slide, element, pptxCoords);\n                break;\n            case 'shape':\n                this.addShapeElementToSlide(slide, element, pptxCoords, theme);\n                break;\n            default:\n                break;\n        }\n    }\n    canvasToPptxCoordinates(element, canvasWidth, canvasHeight) {\n        const PPTX_WIDTH = 10;\n        const PPTX_HEIGHT = 5.625;\n        const scaleX = PPTX_WIDTH / canvasWidth;\n        const scaleY = PPTX_HEIGHT / canvasHeight;\n        const x = element.x * scaleX;\n        const y = element.y * scaleY;\n        const w = (element.width || 200) * scaleX;\n        const h = (element.height || 50) * scaleY;\n        return {\n            x,\n            y,\n            w,\n            h\n        };\n    }\n    addTextElementToSlide(slide, element, pptxCoords, theme, canvasWidth) {\n        const scale = 720 / canvasWidth;\n        const scaledFontSize = (element.fontSize || 18) * scale;\n        const color = (element.fill || theme?.text_color || '#000000').replace('#', '');\n        slide.addText(element.text || '', {\n            ...pptxCoords,\n            fontFace: element.fontFamily || theme?.body_font || 'Arial',\n            fontSize: scaledFontSize,\n            color: color,\n            bold: element.fontStyle === 'bold',\n            italic: element.fontStyle === 'italic',\n            align: element.align || 'left',\n            valign: element.verticalAlign || 'top',\n            bullet: !!element.bulleted,\n            transparency: typeof element.opacity === 'number' ? (1 - element.opacity) * 100 : 0,\n            rotate: element.rotation || 0\n        });\n    }\n    addImageElementToSlide(slide, element, pptxCoords) {\n        const imageOptions = {\n            x: pptxCoords.x,\n            y: pptxCoords.y,\n            sizing: {\n                type: 'cover',\n                w: pptxCoords.w,\n                h: pptxCoords.h\n            },\n            rotate: element.rotation || 0\n        };\n        if (typeof element.src === \"string\" && (element.src.startsWith(\"data:image/png\") || element.src.startsWith(\"data:image/jpeg\"))) {\n            imageOptions.data = element.src;\n            slide.addImage(imageOptions);\n        } else if (typeof element.src === \"string\" && (element.src.startsWith(\"http://\") || element.src.startsWith(\"https://\"))) {\n            imageOptions.path = element.src;\n            slide.addImage(imageOptions);\n        }\n    }\n    addShapeElementToSlide(slide, element, pptxCoords, theme) {\n        slide.addShape(element.shapeType || 'rect', {\n            ...pptxCoords,\n            fill: {\n                color: (element.fill || theme?.primary_color || '#000000').replace(\"#\", \"\")\n            },\n            line: {\n                color: (element.stroke || '#000000').replace(\"#\", \"\"),\n                width: element.strokeWidth || 0\n            },\n            rotate: element.rotation || 0\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvY29tcG9uZW50cy9QcmVzZW50YXRpb24vdXRpbHMvQ29vcmRpbmF0ZVV0aWxpdHkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUdqRCxNQUFNQyxrQkFBa0I7SUFBRUMsT0FBTztJQUFJQyxRQUFRO0FBQU0sRUFBRTtBQUVyRCxNQUFNQztJQUNUQyxVQUFVQyxTQUFTLEVBQUU7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNELFlBQVksT0FBTztRQUNsRCxNQUFNLEVBQUVFLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRSxHQUFHTDtRQUN2QixPQUFPO1lBQ0hFLEdBQUdBLElBQUlQLGdCQUFnQkMsS0FBSztZQUM1Qk8sR0FBR0EsSUFBSVIsZ0JBQWdCRSxNQUFNO1lBQ25DTyxHQUFHRSxLQUFLQyxHQUFHLENBQ1RILElBQUlULGdCQUFnQkMsS0FBSyxFQUN6QkQsZ0JBQWdCQyxLQUFLLEdBQUdNLElBQUlQLGdCQUFnQkMsS0FBSztZQUVuRFMsR0FBR0MsS0FBS0MsR0FBRyxDQUNURixJQUFJVixnQkFBZ0JFLE1BQU0sRUFDMUJGLGdCQUFnQkUsTUFBTSxHQUFHTSxJQUFJUixnQkFBZ0JFLE1BQU07UUFFbkQ7SUFDSjtJQUVBSSxxQkFBcUJPLE1BQU0sRUFBRTtRQUM3QixJQUFJLENBQUNBLFVBQVUsT0FBT0EsV0FBVyxVQUFVLE9BQU87UUFDOUMsTUFBTSxFQUFFTixDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUUsR0FBR0c7UUFDM0IsT0FDRTtZQUFDTjtZQUFHQztZQUFHQztZQUFHQztTQUFFLENBQUNJLEtBQUssQ0FBQyxDQUFDQyxNQUFRLE9BQU9BLFFBQVEsWUFBWUMsU0FBU0QsU0FDaEVOLEtBQUssS0FDTEMsS0FBSyxLQUNMSCxLQUFLLEtBQ0xBLEtBQUssS0FDTEMsS0FBSyxLQUNMQSxLQUFLO0lBRVA7SUFFQVMsMkJBQTJCQyxNQUFNLEVBQUU7UUFDbkMsSUFBSSxDQUFDQSxVQUFVLE9BQU9BLFdBQVcsVUFBVSxPQUFPO1FBQzlDLE1BQU1DLGtCQUFrQixDQUFDO1FBQ3pCLElBQUssTUFBTUMsT0FBT0YsT0FBUTtZQUM1QixJQUNFRyxPQUFPQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDTixRQUFRRSxRQUM3Q0YsTUFBTSxDQUFDRSxJQUFJLElBQ1gsSUFBSSxDQUFDZCxvQkFBb0IsQ0FBQ1ksTUFBTSxDQUFDRSxJQUFJLEdBQ3JDO2dCQUNRRCxlQUFlLENBQUNDLElBQUksR0FBR0YsTUFBTSxDQUFDRSxJQUFJO1lBQ3RDO1FBQ0o7UUFDQSxPQUFPQyxPQUFPSSxJQUFJLENBQUNOLGlCQUFpQk8sTUFBTSxHQUFHLElBQUlQLGtCQUFrQjtJQUN2RTtJQUVGUSwwQkFBMEJDLFlBQVksRUFBRTtRQUN0QyxJQUFJLENBQUNBLGNBQWMsT0FBTztRQUMxQixJQUFJLENBQUNBLGFBQWFDLEtBQUssRUFBRSxPQUFPO1FBRWhDLElBQUssTUFBTVQsT0FBT1EsYUFBYztZQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDdEIsb0JBQW9CLENBQUNzQixZQUFZLENBQUNSLElBQUksR0FBRztnQkFDakQsT0FBTztZQUNUO1FBQ0Y7UUFDQSxPQUFPO0lBQ1A7QUFDSjtBQUVPLE1BQU1VO0lBQ1RDLGFBQWM7SUFDViw0Q0FBNEM7SUFDaEQ7SUFFRixNQUFNQyx3QkFBd0JDLElBQVMsRUFBRUMsS0FBWSxFQUFFO1FBQ2pELCtCQUErQjtRQUMvQixJQUFJLEtBQXVELEVBQUUsRUFPNUQ7UUFDRCxzQkFBc0I7UUFDdEIsSUFBSSxLQUEyRCxFQUFFLEVBT2hFO1FBQ0QsTUFBTVksWUFBWSxPQUFnQkEsU0FBUztRQUMzQyxNQUFNQyxPQUFPLElBQUlEO1FBQ2pCQyxLQUFLN0IsTUFBTSxHQUFHO1FBQ2Q2QixLQUFLbEIsS0FBSyxHQUFHSSxLQUFLZSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUVuQixTQUFTO1FBRTVDSSxLQUFLZSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxDQUFDQztZQUNuQixJQUFJLENBQUNDLDBCQUEwQixDQUFDSixNQUFNRyxXQUFXaEI7UUFDL0M7UUFFQSxNQUFNYSxLQUFLSyxTQUFTLENBQUM7WUFBRUMsVUFBVSxHQUFHTixLQUFLbEIsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUFDO0lBQzFEO0lBRUZzQiwyQkFBMkJKLElBQVMsRUFBRUcsU0FBYyxFQUFFaEIsS0FBWSxFQUFFO1FBQzlELE1BQU1vQixRQUFRUCxLQUFLUSxRQUFRO1FBQy9CLE1BQU1DLGdCQUFnQnRCLE9BQU91QixvQkFBb0I7UUFDN0MsSUFBSUQsZUFBZTtZQUNmRixNQUFNSSxVQUFVLEdBQUc7Z0JBQUVDLE9BQU9ILGNBQWNJLE9BQU8sQ0FBQyxLQUFLO1lBQUk7UUFDL0Q7UUFDSixNQUFNQyxrQkFBa0JYLFVBQVVZLGNBQWMsRUFBRUMsS0FBSyxDQUFDQyxLQUN0REEsR0FBR0MsSUFBSSxLQUFLLFVBQVdELENBQUFBLEdBQUdFLElBQUksS0FBS2hCLFVBQVVyQixLQUFLLElBQUltQyxHQUFHRyxPQUFPO1FBRWxFLElBQUlqQixVQUFVckIsS0FBSyxJQUFJLENBQUNnQyxpQkFBaUI7WUFDdkNQLE1BQU1jLE9BQU8sQ0FBQ2xCLFVBQVVyQixLQUFLLEVBQUU7Z0JBQzdCdEIsR0FBRztnQkFBS0MsR0FBRztnQkFBTUMsR0FBRztnQkFBR0MsR0FBRztnQkFDMUIyRCxVQUFVbkMsT0FBT29DLGdCQUFnQjtnQkFDakNDLFVBQVU7Z0JBQ1ZaLE9BQU8sQ0FBQ3pCLE9BQU9zQyxpQkFBaUIsUUFBTyxFQUFHWixPQUFPLENBQUMsS0FBSztnQkFDdkRhLE1BQU07Z0JBQU1DLE9BQU87Z0JBQVVDLFFBQVE7WUFDdkM7UUFDRjtRQUNBLE1BQU1DLGNBQWMxQixVQUFVMEIsV0FBVyxJQUFJN0UsZ0VBQWFBLENBQUNFLEtBQUs7UUFDaEUsTUFBTTRFLGVBQWUzQixVQUFVMkIsWUFBWSxJQUFJOUUsZ0VBQWFBLENBQUNHLE1BQU07UUFDbEVnRCxDQUFBQSxVQUFVWSxjQUFjLElBQUksRUFBRSxFQUFFYixPQUFPLENBQUMsQ0FBQ2U7WUFDeEMsSUFBSSxDQUFDYyx1QkFBdUIsQ0FBQ3hCLE9BQU9VLElBQUk5QixPQUFPMEMsYUFBYUM7UUFDOUQ7SUFDRjtJQUVBQyx3QkFBd0J4QixLQUFVLEVBQUV5QixPQUFZLEVBQUU3QyxLQUFZLEVBQUUwQyxXQUFtQixFQUFFQyxZQUFvQixFQUFFO1FBQ3pHLE1BQU1HLGFBQWEsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQ0YsU0FBU0gsYUFBYUM7UUFDdEUsT0FBUUUsUUFBUWQsSUFBSTtZQUNsQixLQUFLO2dCQUNILElBQUksQ0FBQ2lCLHFCQUFxQixDQUFDNUIsT0FBT3lCLFNBQVNDLFlBQVk5QyxPQUFPMEM7Z0JBQzlEO1lBQ0YsS0FBSztnQkFDSCxJQUFJLENBQUNPLHNCQUFzQixDQUFDN0IsT0FBT3lCLFNBQVNDO2dCQUM1QztZQUNGLEtBQUs7Z0JBQ0gsSUFBSSxDQUFDSSxzQkFBc0IsQ0FBQzlCLE9BQU95QixTQUFTQyxZQUFZOUM7Z0JBQ3hEO1lBQ0Y7Z0JBQ0U7UUFDSjtJQUNGO0lBRUErQyx3QkFBd0JGLE9BQVksRUFBRUgsV0FBbUIsRUFBRUMsWUFBb0IsRUFBRTtRQUMvRSxNQUFNUSxhQUFhO1FBQ25CLE1BQU1DLGNBQWM7UUFDcEIsTUFBTUMsU0FBU0YsYUFBYVQ7UUFDNUIsTUFBTVksU0FBU0YsY0FBY1Q7UUFDN0IsTUFBTXRFLElBQUl3RSxRQUFReEUsQ0FBQyxHQUFHZ0Y7UUFDdEIsTUFBTS9FLElBQUl1RSxRQUFRdkUsQ0FBQyxHQUFHZ0Y7UUFDdEIsTUFBTS9FLElBQUksQ0FBQ3NFLFFBQVFVLEtBQUssSUFBSSxHQUFFLElBQUtGO1FBQ25DLE1BQU03RSxJQUFJLENBQUNxRSxRQUFRVyxNQUFNLElBQUksRUFBQyxJQUFLRjtRQUNuQyxPQUFPO1lBQUVqRjtZQUFHQztZQUFHQztZQUFHQztRQUFFO0lBQ3RCO0lBRUF3RSxzQkFBc0I1QixLQUFVLEVBQUV5QixPQUFZLEVBQUVDLFVBQWUsRUFBRTlDLEtBQVksRUFBRTBDLFdBQW1CLEVBQUU7UUFDbEcsTUFBTWUsUUFBUSxNQUFNZjtRQUNwQixNQUFNZ0IsaUJBQWlCLENBQUNiLFFBQVFSLFFBQVEsSUFBSSxFQUFDLElBQUtvQjtRQUNsRCxNQUFNaEMsUUFBUSxDQUFDb0IsUUFBUWMsSUFBSSxJQUFJM0QsT0FBTzRELGNBQWMsU0FBUSxFQUFHbEMsT0FBTyxDQUFDLEtBQUs7UUFFNUVOLE1BQU1jLE9BQU8sQ0FBQ1csUUFBUWIsSUFBSSxJQUFJLElBQUk7WUFDaEMsR0FBR2MsVUFBVTtZQUNiWCxVQUFVVSxRQUFRZ0IsVUFBVSxJQUFJN0QsT0FBTzhELGFBQWE7WUFDcER6QixVQUFVcUI7WUFDVmpDLE9BQU9BO1lBQ1BjLE1BQU1NLFFBQVFrQixTQUFTLEtBQUs7WUFDNUJDLFFBQVFuQixRQUFRa0IsU0FBUyxLQUFLO1lBQzlCdkIsT0FBT0ssUUFBUUwsS0FBSyxJQUFJO1lBQ3hCQyxRQUFRSSxRQUFRb0IsYUFBYSxJQUFJO1lBQ2pDQyxRQUFRLENBQUMsQ0FBQ3JCLFFBQVFzQixRQUFRO1lBQzFCQyxjQUFjLE9BQU92QixRQUFRd0IsT0FBTyxLQUFLLFdBQVcsQ0FBQyxJQUFJeEIsUUFBUXdCLE9BQU8sSUFBSSxNQUFNO1lBQ2xGQyxRQUFRekIsUUFBUTBCLFFBQVEsSUFBSTtRQUM5QjtJQUNGO0lBRUF0Qix1QkFBdUI3QixLQUFVLEVBQUV5QixPQUFZLEVBQUVDLFVBQWUsRUFBRTtRQUNoRSxNQUFNMEIsZUFBZTtZQUNqQm5HLEdBQUd5RSxXQUFXekUsQ0FBQztZQUNmQyxHQUFHd0UsV0FBV3hFLENBQUM7WUFDZm1HLFFBQVE7Z0JBQ0oxQyxNQUFNO2dCQUNOeEQsR0FBR3VFLFdBQVd2RSxDQUFDO2dCQUNmQyxHQUFHc0UsV0FBV3RFLENBQUM7WUFDbkI7WUFDQThGLFFBQVF6QixRQUFRMEIsUUFBUSxJQUFJO1FBQ2hDO1FBRUEsSUFDRSxPQUFPMUIsUUFBUXJDLEdBQUcsS0FBSyxZQUN0QnFDLENBQUFBLFFBQVFyQyxHQUFHLENBQUNrRSxVQUFVLENBQUMscUJBQXFCN0IsUUFBUXJDLEdBQUcsQ0FBQ2tFLFVBQVUsQ0FBQyxrQkFBaUIsR0FDckY7WUFDR0YsYUFBcUJ6RSxJQUFJLEdBQUc4QyxRQUFRckMsR0FBRztZQUN4Q1ksTUFBTXVELFFBQVEsQ0FBQ0g7UUFDbkIsT0FBTyxJQUNMLE9BQU8zQixRQUFRckMsR0FBRyxLQUFLLFlBQ3RCcUMsQ0FBQUEsUUFBUXJDLEdBQUcsQ0FBQ2tFLFVBQVUsQ0FBQyxjQUFjN0IsUUFBUXJDLEdBQUcsQ0FBQ2tFLFVBQVUsQ0FBQyxXQUFVLEdBQ3ZFO1lBQ0dGLGFBQXFCSSxJQUFJLEdBQUcvQixRQUFRckMsR0FBRztZQUN4Q1ksTUFBTXVELFFBQVEsQ0FBQ0g7UUFDbkI7SUFDRjtJQUVBdEIsdUJBQXVCOUIsS0FBVSxFQUFFeUIsT0FBWSxFQUFFQyxVQUFlLEVBQUU5QyxLQUFZLEVBQUU7UUFDOUVvQixNQUFNeUQsUUFBUSxDQUFDaEMsUUFBUWlDLFNBQVMsSUFBSSxRQUFRO1lBQzFDLEdBQUdoQyxVQUFVO1lBQ2JhLE1BQU07Z0JBQUVsQyxPQUFPLENBQUNvQixRQUFRYyxJQUFJLElBQUkzRCxPQUFPc0MsaUJBQWlCLFNBQVEsRUFBR1osT0FBTyxDQUFDLEtBQUs7WUFBSTtZQUNwRnFELE1BQU07Z0JBQUV0RCxPQUFPLENBQUNvQixRQUFRbUMsTUFBTSxJQUFJLFNBQVEsRUFBR3RELE9BQU8sQ0FBQyxLQUFLO2dCQUFLNkIsT0FBT1YsUUFBUW9DLFdBQVcsSUFBSTtZQUFFO1lBQy9GWCxRQUFRekIsUUFBUTBCLFFBQVEsSUFBSTtRQUM5QjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYW1iYW5cXE9uZURyaXZlXFxEZXNrdG9wXFxGb2xkZXJzXFxQcmVzR2VuXFxzcmNcXGNvbXBvbmVudHNcXFByZXNlbnRhdGlvblxcdXRpbHNcXENvb3JkaW5hdGVVdGlsaXR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENBTlZBU19DT05GSUcgfSBmcm9tIFwiLi4vRWRpdC9DYW52YVR5cGVzQ29uc3RcIjtcbmltcG9ydCB0eXBlIHsgVGhlbWUgfSBmcm9tIFwiLi4vY2xpZW50LW9ubHkvdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IFBQVFhfRElNRU5TSU9OUyA9IHsgV0lEVEg6IDEwLCBIRUlHSFQ6IDUuNjI1IH07XG5cbmV4cG9ydCBjbGFzcyBDb29yZGluYXRlTWFuYWdlciB7XG4gICAgd2ViVG9QcHR4KHdlYkNvb3Jkcykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZFdlYkNvb3JkaW5hdGUod2ViQ29vcmRzKSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IHsgeCwgeSwgdywgaCB9ID0gd2ViQ29vcmRzO1xuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIHg6IHggKiBQUFRYX0RJTUVOU0lPTlMuV0lEVEgsIFxuICAgICAgICAgICAgeTogeSAqIFBQVFhfRElNRU5TSU9OUy5IRUlHSFQsIFxuICAgICAgdzogTWF0aC5taW4oXG4gICAgICAgIHcgKiBQUFRYX0RJTUVOU0lPTlMuV0lEVEgsXG4gICAgICAgIFBQVFhfRElNRU5TSU9OUy5XSURUSCAtIHggKiBQUFRYX0RJTUVOU0lPTlMuV0lEVEhcbiAgICAgICksXG4gICAgICBoOiBNYXRoLm1pbihcbiAgICAgICAgaCAqIFBQVFhfRElNRU5TSU9OUy5IRUlHSFQsXG4gICAgICAgIFBQVFhfRElNRU5TSU9OUy5IRUlHSFQgLSB5ICogUFBUWF9ESU1FTlNJT05TLkhFSUdIVFxuICAgICAgKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpc1ZhbGlkV2ViQ29vcmRpbmF0ZShjb29yZHMpIHtcbiAgICBpZiAoIWNvb3JkcyB8fCB0eXBlb2YgY29vcmRzICE9PSBcIm9iamVjdFwiKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHsgeCwgeSwgdywgaCB9ID0gY29vcmRzO1xuICAgIHJldHVybiAoXG4gICAgICBbeCwgeSwgdywgaF0uZXZlcnkoKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZSh2YWwpKSAmJlxuICAgICAgdyA+PSAwICYmXG4gICAgICBoID49IDAgJiZcbiAgICAgIHggPj0gMCAmJlxuICAgICAgeCA8PSAxICYmXG4gICAgICB5ID49IDAgJiZcbiAgICAgIHkgPD0gMVxuICAgICk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVBbmROb3JtYWxpemVMYXlvdXQobGF5b3V0KSB7XG4gICAgaWYgKCFsYXlvdXQgfHwgdHlwZW9mIGxheW91dCAhPT0gXCJvYmplY3RcIikgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZExheW91dCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBsYXlvdXQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGxheW91dCwga2V5KSAmJlxuICAgICAgICBsYXlvdXRba2V5XSAmJlxuICAgICAgICB0aGlzLmlzVmFsaWRXZWJDb29yZGluYXRlKGxheW91dFtrZXldKVxuICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGVkTGF5b3V0W2tleV0gPSBsYXlvdXRba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModmFsaWRhdGVkTGF5b3V0KS5sZW5ndGggPiAwID8gdmFsaWRhdGVkTGF5b3V0IDogbnVsbDtcbiAgICB9XG5cbiAgdmFsaWRhdGVTbGlkZU1lYXN1cmVtZW50cyhtZWFzdXJlbWVudHMpIHtcbiAgICBpZiAoIW1lYXN1cmVtZW50cykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghbWVhc3VyZW1lbnRzLnRpdGxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBtZWFzdXJlbWVudHMpIHtcbiAgICAgIGlmICghdGhpcy5pc1ZhbGlkV2ViQ29vcmRpbmF0ZShtZWFzdXJlbWVudHNba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcHR4RXhwb3J0TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIFJlbW92ZWQgdW51c2VkIGNvb3JkaW5hdGVNYW5hZ2VyIHByb3BlcnR5XG4gICAgfVxuXG4gIGFzeW5jIGV4cG9ydFNhdmVkUHJlc2VudGF0aW9uKGRhdGE6IGFueSwgdGhlbWU6IFRoZW1lKSB7XG4gICAgICAgIC8vIEVuc3VyZSBKU1ppcCBpcyBsb2FkZWQgZmlyc3RcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgISh3aW5kb3cgYXMgYW55KS5KU1ppcCkge1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSBcIi9qc3ppcC5taW4uanNcIjtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGVuIGxvYWQgcHB0eGdlbmpzXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmICEod2luZG93IGFzIGFueSkuUHB0eEdlbkpTKSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgc2NyaXB0LnNyYyA9IFwiL3BwdHhnZW4ubWluLmpzXCI7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgUHB0eEdlbkpTID0gKHdpbmRvdyBhcyBhbnkpLlBwdHhHZW5KUztcbiAgICAgICAgY29uc3QgcHB0eCA9IG5ldyBQcHR4R2VuSlMoKTtcbiAgICAgICAgcHB0eC5sYXlvdXQgPSAnTEFZT1VUXzE2eDknO1xuICAgICAgICBwcHR4LnRpdGxlID0gZGF0YS5zbGlkZXM/LlswXT8udGl0bGUgfHwgXCJQcmVzZW50YXRpb25cIjtcblxuICAgIGRhdGEuc2xpZGVzLmZvckVhY2goKHNsaWRlRGF0YTogYW55KSA9PiB7XG4gICAgICB0aGlzLmFkZFNsaWRlRnJvbUNhbnZhc0VsZW1lbnRzKHBwdHgsIHNsaWRlRGF0YSwgdGhlbWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBwcHR4LndyaXRlRmlsZSh7IGZpbGVOYW1lOiBgJHtwcHR4LnRpdGxlfS5wcHR4YCB9KTtcbiAgICB9XG5cbiAgYWRkU2xpZGVGcm9tQ2FudmFzRWxlbWVudHMocHB0eDogYW55LCBzbGlkZURhdGE6IGFueSwgdGhlbWU6IFRoZW1lKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlID0gcHB0eC5hZGRTbGlkZSgpO1xuICAgIGNvbnN0IGJhY2tncm91bmRIZXggPSB0aGVtZT8uYmFja2dyb3VuZF9jb2xvciB8fCAnI0ZGRkZGRic7XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kSGV4KSB7XG4gICAgICAgICAgICBzbGlkZS5iYWNrZ3JvdW5kID0geyBjb2xvcjogYmFja2dyb3VuZEhleC5yZXBsYWNlKFwiI1wiLCBcIlwiKSB9O1xuICAgICAgICB9XG4gICAgY29uc3QgaGFzVGl0bGVFbGVtZW50ID0gc2xpZGVEYXRhLmNhbnZhc0VsZW1lbnRzPy5zb21lKChlbDogYW55KSA9PlxuICAgICAgZWwudHlwZSA9PT0gJ3RleHQnICYmIChlbC50ZXh0ID09PSBzbGlkZURhdGEudGl0bGUgfHwgZWwuaXNUaXRsZSlcbiAgICApO1xuICAgIGlmIChzbGlkZURhdGEudGl0bGUgJiYgIWhhc1RpdGxlRWxlbWVudCkge1xuICAgICAgc2xpZGUuYWRkVGV4dChzbGlkZURhdGEudGl0bGUsIHtcbiAgICAgICAgeDogMC41LCB5OiAwLjI1LCB3OiA5LCBoOiAwLjc1LFxuICAgICAgICBmb250RmFjZTogdGhlbWU/LmhlYWRpbmdfZm9udCB8fCAnQXJpYWwnLFxuICAgICAgICBmb250U2l6ZTogMjQsXG4gICAgICAgIGNvbG9yOiAodGhlbWU/LnByaW1hcnlfY29sb3IgfHwgJzAwMDAwMCcpLnJlcGxhY2UoXCIjXCIsIFwiXCIpLFxuICAgICAgICBib2xkOiB0cnVlLCBhbGlnbjogJ2NlbnRlcicsIHZhbGlnbjogJ21pZGRsZScsXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgY2FudmFzV2lkdGggPSBzbGlkZURhdGEuY2FudmFzV2lkdGggfHwgQ0FOVkFTX0NPTkZJRy5XSURUSDtcbiAgICBjb25zdCBjYW52YXNIZWlnaHQgPSBzbGlkZURhdGEuY2FudmFzSGVpZ2h0IHx8IENBTlZBU19DT05GSUcuSEVJR0hUO1xuICAgIChzbGlkZURhdGEuY2FudmFzRWxlbWVudHMgfHwgW10pLmZvckVhY2goKGVsOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuYWRkQ2FudmFzRWxlbWVudFRvU2xpZGUoc2xpZGUsIGVsLCB0aGVtZSwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRDYW52YXNFbGVtZW50VG9TbGlkZShzbGlkZTogYW55LCBlbGVtZW50OiBhbnksIHRoZW1lOiBUaGVtZSwgY2FudmFzV2lkdGg6IG51bWJlciwgY2FudmFzSGVpZ2h0OiBudW1iZXIpIHtcbiAgICBjb25zdCBwcHR4Q29vcmRzID0gdGhpcy5jYW52YXNUb1BwdHhDb29yZGluYXRlcyhlbGVtZW50LCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcbiAgICBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIHRoaXMuYWRkVGV4dEVsZW1lbnRUb1NsaWRlKHNsaWRlLCBlbGVtZW50LCBwcHR4Q29vcmRzLCB0aGVtZSwgY2FudmFzV2lkdGgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgICAgdGhpcy5hZGRJbWFnZUVsZW1lbnRUb1NsaWRlKHNsaWRlLCBlbGVtZW50LCBwcHR4Q29vcmRzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzaGFwZSc6XG4gICAgICAgIHRoaXMuYWRkU2hhcGVFbGVtZW50VG9TbGlkZShzbGlkZSwgZWxlbWVudCwgcHB0eENvb3JkcywgdGhlbWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGNhbnZhc1RvUHB0eENvb3JkaW5hdGVzKGVsZW1lbnQ6IGFueSwgY2FudmFzV2lkdGg6IG51bWJlciwgY2FudmFzSGVpZ2h0OiBudW1iZXIpIHtcbiAgICBjb25zdCBQUFRYX1dJRFRIID0gMTA7XG4gICAgY29uc3QgUFBUWF9IRUlHSFQgPSA1LjYyNTtcbiAgICBjb25zdCBzY2FsZVggPSBQUFRYX1dJRFRIIC8gY2FudmFzV2lkdGg7XG4gICAgY29uc3Qgc2NhbGVZID0gUFBUWF9IRUlHSFQgLyBjYW52YXNIZWlnaHQ7XG4gICAgY29uc3QgeCA9IGVsZW1lbnQueCAqIHNjYWxlWDtcbiAgICBjb25zdCB5ID0gZWxlbWVudC55ICogc2NhbGVZO1xuICAgIGNvbnN0IHcgPSAoZWxlbWVudC53aWR0aCB8fCAyMDApICogc2NhbGVYO1xuICAgIGNvbnN0IGggPSAoZWxlbWVudC5oZWlnaHQgfHwgNTApICogc2NhbGVZO1xuICAgIHJldHVybiB7IHgsIHksIHcsIGggfTtcbiAgfVxuXG4gIGFkZFRleHRFbGVtZW50VG9TbGlkZShzbGlkZTogYW55LCBlbGVtZW50OiBhbnksIHBwdHhDb29yZHM6IGFueSwgdGhlbWU6IFRoZW1lLCBjYW52YXNXaWR0aDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc2NhbGUgPSA3MjAgLyBjYW52YXNXaWR0aDtcbiAgICBjb25zdCBzY2FsZWRGb250U2l6ZSA9IChlbGVtZW50LmZvbnRTaXplIHx8IDE4KSAqIHNjYWxlO1xuICAgIGNvbnN0IGNvbG9yID0gKGVsZW1lbnQuZmlsbCB8fCB0aGVtZT8udGV4dF9jb2xvciB8fCAnIzAwMDAwMCcpLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgXG4gICAgc2xpZGUuYWRkVGV4dChlbGVtZW50LnRleHQgfHwgJycsIHtcbiAgICAgIC4uLnBwdHhDb29yZHMsXG4gICAgICBmb250RmFjZTogZWxlbWVudC5mb250RmFtaWx5IHx8IHRoZW1lPy5ib2R5X2ZvbnQgfHwgJ0FyaWFsJyxcbiAgICAgIGZvbnRTaXplOiBzY2FsZWRGb250U2l6ZSxcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIGJvbGQ6IGVsZW1lbnQuZm9udFN0eWxlID09PSAnYm9sZCcsXG4gICAgICBpdGFsaWM6IGVsZW1lbnQuZm9udFN0eWxlID09PSAnaXRhbGljJyxcbiAgICAgIGFsaWduOiBlbGVtZW50LmFsaWduIHx8ICdsZWZ0JyxcbiAgICAgIHZhbGlnbjogZWxlbWVudC52ZXJ0aWNhbEFsaWduIHx8ICd0b3AnLFxuICAgICAgYnVsbGV0OiAhIWVsZW1lbnQuYnVsbGV0ZWQsXG4gICAgICB0cmFuc3BhcmVuY3k6IHR5cGVvZiBlbGVtZW50Lm9wYWNpdHkgPT09ICdudW1iZXInID8gKDEgLSBlbGVtZW50Lm9wYWNpdHkpICogMTAwIDogMCxcbiAgICAgIHJvdGF0ZTogZWxlbWVudC5yb3RhdGlvbiB8fCAwLFxuICAgIH0pO1xuICB9XG5cbiAgYWRkSW1hZ2VFbGVtZW50VG9TbGlkZShzbGlkZTogYW55LCBlbGVtZW50OiBhbnksIHBwdHhDb29yZHM6IGFueSkge1xuICAgIGNvbnN0IGltYWdlT3B0aW9ucyA9IHtcbiAgICAgICAgeDogcHB0eENvb3Jkcy54LFxuICAgICAgICB5OiBwcHR4Q29vcmRzLnksXG4gICAgICAgIHNpemluZzoge1xuICAgICAgICAgICAgdHlwZTogJ2NvdmVyJyxcbiAgICAgICAgICAgIHc6IHBwdHhDb29yZHMudyxcbiAgICAgICAgICAgIGg6IHBwdHhDb29yZHMuaCxcbiAgICAgICAgfSxcbiAgICAgICAgcm90YXRlOiBlbGVtZW50LnJvdGF0aW9uIHx8IDAsXG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBlbGVtZW50LnNyYyA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgKGVsZW1lbnQuc3JjLnN0YXJ0c1dpdGgoXCJkYXRhOmltYWdlL3BuZ1wiKSB8fCBlbGVtZW50LnNyYy5zdGFydHNXaXRoKFwiZGF0YTppbWFnZS9qcGVnXCIpKVxuICAgICkge1xuICAgICAgICAoaW1hZ2VPcHRpb25zIGFzIGFueSkuZGF0YSA9IGVsZW1lbnQuc3JjO1xuICAgICAgICBzbGlkZS5hZGRJbWFnZShpbWFnZU9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0eXBlb2YgZWxlbWVudC5zcmMgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgIChlbGVtZW50LnNyYy5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSB8fCBlbGVtZW50LnNyYy5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpXG4gICAgKSB7XG4gICAgICAgIChpbWFnZU9wdGlvbnMgYXMgYW55KS5wYXRoID0gZWxlbWVudC5zcmM7XG4gICAgICAgIHNsaWRlLmFkZEltYWdlKGltYWdlT3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgYWRkU2hhcGVFbGVtZW50VG9TbGlkZShzbGlkZTogYW55LCBlbGVtZW50OiBhbnksIHBwdHhDb29yZHM6IGFueSwgdGhlbWU6IFRoZW1lKSB7XG4gICAgc2xpZGUuYWRkU2hhcGUoZWxlbWVudC5zaGFwZVR5cGUgfHwgJ3JlY3QnLCB7XG4gICAgICAuLi5wcHR4Q29vcmRzLFxuICAgICAgZmlsbDogeyBjb2xvcjogKGVsZW1lbnQuZmlsbCB8fCB0aGVtZT8ucHJpbWFyeV9jb2xvciB8fCAnIzAwMDAwMCcpLnJlcGxhY2UoXCIjXCIsIFwiXCIpIH0sXG4gICAgICBsaW5lOiB7IGNvbG9yOiAoZWxlbWVudC5zdHJva2UgfHwgJyMwMDAwMDAnKS5yZXBsYWNlKFwiI1wiLCBcIlwiKSwgd2lkdGg6IGVsZW1lbnQuc3Ryb2tlV2lkdGggfHwgMCB9LFxuICAgICAgcm90YXRlOiBlbGVtZW50LnJvdGF0aW9uIHx8IDAsXG4gICAgfSk7XG4gIH1cbn0iXSwibmFtZXMiOlsiQ0FOVkFTX0NPTkZJRyIsIlBQVFhfRElNRU5TSU9OUyIsIldJRFRIIiwiSEVJR0hUIiwiQ29vcmRpbmF0ZU1hbmFnZXIiLCJ3ZWJUb1BwdHgiLCJ3ZWJDb29yZHMiLCJpc1ZhbGlkV2ViQ29vcmRpbmF0ZSIsIngiLCJ5IiwidyIsImgiLCJNYXRoIiwibWluIiwiY29vcmRzIiwiZXZlcnkiLCJ2YWwiLCJpc0Zpbml0ZSIsInZhbGlkYXRlQW5kTm9ybWFsaXplTGF5b3V0IiwibGF5b3V0IiwidmFsaWRhdGVkTGF5b3V0Iiwia2V5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwia2V5cyIsImxlbmd0aCIsInZhbGlkYXRlU2xpZGVNZWFzdXJlbWVudHMiLCJtZWFzdXJlbWVudHMiLCJ0aXRsZSIsIlBwdHhFeHBvcnRNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJleHBvcnRTYXZlZFByZXNlbnRhdGlvbiIsImRhdGEiLCJ0aGVtZSIsIndpbmRvdyIsIkpTWmlwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJvbmxvYWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJQcHR4R2VuSlMiLCJwcHR4Iiwic2xpZGVzIiwiZm9yRWFjaCIsInNsaWRlRGF0YSIsImFkZFNsaWRlRnJvbUNhbnZhc0VsZW1lbnRzIiwid3JpdGVGaWxlIiwiZmlsZU5hbWUiLCJzbGlkZSIsImFkZFNsaWRlIiwiYmFja2dyb3VuZEhleCIsImJhY2tncm91bmRfY29sb3IiLCJiYWNrZ3JvdW5kIiwiY29sb3IiLCJyZXBsYWNlIiwiaGFzVGl0bGVFbGVtZW50IiwiY2FudmFzRWxlbWVudHMiLCJzb21lIiwiZWwiLCJ0eXBlIiwidGV4dCIsImlzVGl0bGUiLCJhZGRUZXh0IiwiZm9udEZhY2UiLCJoZWFkaW5nX2ZvbnQiLCJmb250U2l6ZSIsInByaW1hcnlfY29sb3IiLCJib2xkIiwiYWxpZ24iLCJ2YWxpZ24iLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImFkZENhbnZhc0VsZW1lbnRUb1NsaWRlIiwiZWxlbWVudCIsInBwdHhDb29yZHMiLCJjYW52YXNUb1BwdHhDb29yZGluYXRlcyIsImFkZFRleHRFbGVtZW50VG9TbGlkZSIsImFkZEltYWdlRWxlbWVudFRvU2xpZGUiLCJhZGRTaGFwZUVsZW1lbnRUb1NsaWRlIiwiUFBUWF9XSURUSCIsIlBQVFhfSEVJR0hUIiwic2NhbGVYIiwic2NhbGVZIiwid2lkdGgiLCJoZWlnaHQiLCJzY2FsZSIsInNjYWxlZEZvbnRTaXplIiwiZmlsbCIsInRleHRfY29sb3IiLCJmb250RmFtaWx5IiwiYm9keV9mb250IiwiZm9udFN0eWxlIiwiaXRhbGljIiwidmVydGljYWxBbGlnbiIsImJ1bGxldCIsImJ1bGxldGVkIiwidHJhbnNwYXJlbmN5Iiwib3BhY2l0eSIsInJvdGF0ZSIsInJvdGF0aW9uIiwiaW1hZ2VPcHRpb25zIiwic2l6aW5nIiwic3RhcnRzV2l0aCIsImFkZEltYWdlIiwicGF0aCIsImFkZFNoYXBlIiwic2hhcGVUeXBlIiwibGluZSIsInN0cm9rZSIsInN0cm9rZVdpZHRoIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./src/components/Presentation/utils/CoordinateUtility.ts\n");

/***/ })

};
;